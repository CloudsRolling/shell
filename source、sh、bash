
source、sh、bash、./ 执行脚本的区别
1、source命令用法：
　　source FileName
　　作用:在当前bash环境下读取并执行FileName中的命令。该filename文件可以无"执行权限"
注：该命令通常用命令“.”来替代。
如：source .bash_profile
. .bash_profile两者等效。
source(或点)命令通常用于重新执行刚修改的初始化文档。
source命令(从 C Shell 而来)是bash shell的内置命令。
点命令，就是个点符号，(从Bourne Shell而来)。
2、sh和bash命令用法：
sh FileName
bash FileName
作用:在当前bash环境下读取并执行FileName中的命令。该filename文件可以无"执行权限"
注：两者在执行文件时的不同，是分别用自己的shell来跑文件。
sh使用“-n”选项进行shell脚本的语法检查，使用“-x”选项实现shell脚本逐条语句的跟踪，
可以巧妙地利用shell的内置变量增强“-x”选项的输出信息等。
3、./的命令用法：
./FileName
作用:打开一个子shell来读取并执行FileName中命令。
注：运行一个shell脚本时会启动另一个命令解释器.
每个shell脚本有效地运行在父shell(parent shell)的一个子进程里.
这个父shell是指在一个控制终端或在一个xterm窗口中给你命令指示符的进程.
shell脚本也可以启动他自已的子进程.
这些子shell(即子进程)使脚本并行地，有效率地地同时运行脚本内的多个子任务.
shell的嵌入命令：
: 空，永远返回为true
. 从当前shell中执行操作
break 退出for、while、until或case语句
cd 改变到当前目录
continue 执行循环的下一步
echo 反馈信息到标准输出
eval 读取参数，执行结果命令
exec 执行命令，但不在当前shell
exit 退出当前shell
export 导出变量，使当前shell可利用它
pwd 显示当前目录
read 从标准输入读取一行文本
readonly 使变量只读
return 退出函数并带有返回值
set 控制各种参数到标准输出的显示
shift 命令行参数向左偏移一个
test 评估条件表达式
times 显示shell运行过程的用户和系统时间
trap 当捕获信号时运行指定命令
ulimit 显示或设置shell资源
umask 显示或设置缺省文件创建模式
unset 从shell内存中删除变量或函数
wait 等待直到子进程运行完毕
-----------------------------------------------------------------
linux文件描述符：可以理解为linux跟踪打开文件，而分配的一个数字，这个数字有点类似c语言操作文件时候的句柄，通过句柄就可以实现
文件的读写 操作。 用户可以自定义文件描述符范围是：3-num,这个最大数字，跟用户的：ulimit –n 定义数字有关系，不能超过最大值。
linux启动后，会默认打开3个文件描述符，分别是：标准输入standard input 0,正确输出standard output 1,错误输出：error output 2
以后打开文件后。新增文件绑定描述符 可以依次增加。 一条shell命令执行，都会继承父进程的文件描述符。因此，所有运行的shell命令，
都会有默认3个文件描述符。
对于任何一条linux 命令执行，它会是这样一个过程：
一个命令执行了：
先有一个输入：输入可以从键盘，也可以从文件得到
命令执行完成：成功了，会把成功结果输出到屏幕：standard output默认是屏幕
命令执行有错误：会把错误也输出到屏幕上面：standard error默认也是指的屏幕
文 件输入输出由追踪为一个给定的进程所有打开文件的整数句柄来完成。这些数字值就是文件描述符。最为人们所知的文件米描述符是
stdin, stdout 和 stderr，文件描述符的数字分别是0，1和2。这些数字和各自的设备是保留的。一个命令执行前，先会准备好所有输入输
出，默认分别绑定 （stdin,stdout,stderr)，如果这个时候出现错误，命令将终止，不会执行。命令解析过程，可以参考：Linux Shell 通配
符、元字符、转义符使用实例介绍
这些默认的输出，输入都是linux系统内定的，我们在使用过程中，有时候并不希望执行结果输出到屏幕。我想输出到文件或其它设备。这
个时候我们就需要进行输出重定向了。
linux shell下常用输入输出操作符是：
1. 标准输入 (stdin) ：代码为 0 ，使用 < 或 << ； /dev/stdin -> /proc/self/fd/0 0代表：/dev/stdin
2. 标准输出 (stdout)：代码为 1 ，使用 > 或 >> ； /dev/stdout -> /proc/self/fd/1 1代表：/dev/stdout
3. 标准错误输出(stderr)：代码为 2 ，使用 2> 或 2>> ； /dev/stderr -> /proc/self/fd/2 2代表：/dev/stderr
输出重定向：
格式：
command-line1 [1-n] > file或文件操作符或设备
上面命令意思是：将一条命令执行结果（标准输出，或者错误输出，本来都要打印到屏幕上面的） 重定向其它输出设备（文件，打开文件
操作符，或打印机等等）1,2分别是标准输出，错误输出。
实例：
#显示当前目录文件 test.sh test1.sh test1.sh实际不存在
[chengmo@centos5 shell]$ ls test.sh test1.sh
ls: test1.sh: 没有这个文件和目录
test.sh
#正确输出与错误输出都显示在屏幕了，现在需要把正确输出写入suc.txt
# 1>可以省略，不写，默认所至标准输出
[chengmo@centos5 shell]$ ls test.sh test1.sh 1>suc.txt
ls: test1.sh: 没有这个文件和目录
[chengmo@centos5 shell]$ cat suc.txt
test.sh
#把错误输出，不输出到屏幕，输出到err.txt
[chengmo@centos5 shell]$ ls test.sh test1.sh 1>suc.txt 2>err.txt
[chengmo@centos5 shell]$ cat suc.txt err.txt
test.sh
ls: test1.sh: 没有这个文件和目录
#继续追加把输出写入suc.txt err.txt “>>”追加操作符
[chengmo@centos5 shell]$ ls test.sh test1.sh 1>>suc.txt 2>>err.txt
#将错误输出信息关闭掉
[chengmo@centos5 shell]$ ls test.sh test1.sh 2>&-
test.sh
[chengmo@centos5 shell]$ ls test.sh test1.sh 2>/dev/null
test.sh
#&[n] 代表是已经存在的文件描述符，&1 代表输出 &2代表错误输出 &-代表关闭与它绑定的描述符
#/dev/null 这个设备，是linux 中黑洞设备，什么信息只要输出给这个设备，都会给吃掉
#关闭所有输出
[chengmo@centos5 shell]$ ls test.sh test1.sh 1>&- 2>&-
#关闭 1 ，2 文件描述符
[chengmo@centos5 shell]$ ls test.sh test1.sh 2>/dev/null 1>/dev/null
#将1,2 输出转发给/dev/null设备
[chengmo@centos5 shell]$ ls test.sh test1.sh >/dev/null 2>&1
#将错误输出2 绑定给 正确输出 1，然后将 正确输出 发送给 /dev/null设备 这种常用
<P>[chengmo@centos5 shell]$ ls test.sh test1.sh &>/dev/null
#& 代表标准输出 ，错误输出 将所有标准输出与错误输出 输入到/dev/null文件
</P>
注意：
1、shell遇到”>”操作符，会判断右边文件是否存在，如果存在就先删除，并且创建新文件。不存在直接创建。 无论左边命令执行是否成
功。右边文件都会变为空。
2、“>>”操作符，判断右边文件，如果不存在，先创建。以添加方式打开文件，会分配一个文件描述符[不特别指定，默认为1,2]然后，与
左边的标准输出（1）或错误输出（2） 绑定。
3、当命令：执行完，绑定文件的描述符也自动失效。0,1,2又会空闲。
4、一条命令启动，命令的输入，正确输出，错误输出，默认分别绑定0,1,2文件描述符。
5、一条命令在执行前，先会检查输出是否正确，如果输出设备错误，将不会进行命令执行
输入重定向
格式：
command-line [n] <file或文件描述符&设备
将然有，命令默认从键盘获得的输入，改成从文件，或者其它打开文件以及设备输入。执行这个命令，将标准输入0，与文件或设备绑
定。将由它进行输入。
实例：
[chengmo@centos5 shell]# cat > catfile
testing
cat file test
#这里按下 [ctrl]+d 离开
#从标准输入【键盘】获得数据，然后输出给catfile文件
[chengmo@centos5 shell]$ cat>catfile <test.sh
#cat 从test.sh 获得输入数据，然后输出给文件catfile
[chengmo@centos5 shell]$ cat>catfile <<eof
test a file
test!
eof
#<< 这个连续两个小符号， 他代表的是『结束的输入字符』的意思。这样当空行输入eof字符，输入自动结束，不用ctrl+D
exec绑定重定向
格式：
exec 文件描述符[n] <或> file或文件描述符或设备
在上面讲的输入，输出重定向 将输入，输出绑定文件或设备后。只对当前那条指令是有效的。如果需要在绑定之后，接下来的所有命令都
支持的话。就需要用exec命令
实例：
[chengmo@centos5 shell]$ exec 6>&1
#将标准输出与fd 6绑定
[chengmo@centos5 shell]$ ls /proc/self/fd/
0 1 2 3 6
#出现文件描述符6
[chengmo@centos5 shell]$ exec 1>suc.txt
#将接下来所有命令标准输出，绑定到suc.txt文件（输出到该文件）
[chengmo@centos5 shell]$ ls -al
#执行命令，发现什么都不返回了，因为标准输出已经输出到suc.txt文件了
[chengmo@centos5 shell]$ exec 1>&6
#恢复标准输出
[chengmo@centos5 shell]$ exec 6>&-
#关闭fd 6描述符
[chengmo@centos5 ~]$ ls /proc/self/fd/
0 1 2 3
说明：使用前先将标准输入保存到文件描述符6，这里说明下，文件描述符默认会打开0,1,2 还可以使用自定义描述符 。然后对标准输出绑
定到文件，接下来所有输出都会发生到文件。 使用完后，恢复标准的输出，关闭打开文件描述符6。
有趣事情：
可能有朋友会这样用：exec 1>suc.txt ，接下来所有输出都绑定到suc.txt 文件，那么怎么样恢复原来的呢？ 试试你就会发现问题所在……
复杂一点实例
exec 3<>test.sh;
#打开test.sh可读写操作，与文件描述符3绑定
while read line<&3
do
echo $line;
done
#循环读取文件描述符3（读取的是test.sh内容）
exec 3>&-
exec 3<&-
#关闭文件的，输入，输出绑定
总结下：
学习就要总结，总结才可以提高了。哈哈！
估计还有一些朋友是头晕晕的。怎么linux的重定向这么复杂呢，又是文件打开描述符又是读，还有些，还有默认标准输入输出。
其实，总结一下，重定向应用通常就以下两点：
1、重新设置命令的默认输入，输出，指向到自己文件（文件，文件描述符，设备其实都是文件，因为linux就是基于设备也是文件，描述
符也指向是文件）
2、扩展自己新的描述符，对文件进行读写操作
------------------------------------------------
AWK
-F 以XX为分割
df -lh | grep boot | awk '{print $5}' | awk -F '%' '{print $1}'
grep "bash" /etc/passwd | awk -F ':' '{print $1,$7}'
首行尾行添加内容
grep "bash" /etc/passwd | awk -F ":" 'BEGIN {print "name,shell"} {print $1","$7} END {print "bin/bosh"}'
搜索/etc/passwd有root关键字的所有行，并显示对应的shell
awk -F: '/root/{print $7}' /etc/passwd
对count指定变量
awk '{count++;print $0;} END {print "user count is ", count}' /etc/passwd
这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0:
awk 'BEGIN {count=0;print "[start]user count is ", count} {count=count+1;print $0;} END{print "[end]user count is ", count}' /etc/passwd
统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹):
ls -l |awk 'BEGIN {size=0;print "[start]size is ", size} {if($5!=4096){size=size+$5;}} END{print "[end]size is ", size/1024/1024,"M"}'
----------------------------------------------------
unset 变量名 #取消定义变量
set/env 查看所有的环境变量
•常见的环境变量：
• $USER 、$LOGNAME
• $UID 、 $SHELL 、$HOME
• $PWD、 $PATH
$PS1、
--------------------------------------------------
linux中shell变量$#,$@,$0,$1,$2的含义解释:
变量说明:
$$
Shell本身的PID（ProcessID）
$!
Shell最后运行的后台Process的PID
$?
最后运行的命令的结束代码（返回值）
$-
使用Set命令设定的Flag一览
$*
所有参数列表。如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
$@
所有参数列表。如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
$#
添加到Shell的参数个数
$0
Shell本身的文件名
$1～$n
添加到Shell的各参数值。$1是第1参数、$2是第2参数…。
示例：
1 #!/bin/bash
2 #
3 printf "The complete list is %s\n""$$"
4 printf "The complete list is %s\n""$!"
5 printf "The complete list is %s\n""$?"
6 printf "The complete list is %s\n""$*"
7 printf "The complete list is %s\n""$@"
8 printf "The complete list is %s\n""$#"
9 printf "The complete list is %s\n""$0"
10 printf "The complete list is %s\n""$1"
11 printf "The complete list is %s\n""$2
结果：
[Aric@localhost ~]$ bash params.sh 123456 QQ
The complete list is24249
The complete list is
The complete list is0
The complete list is123456 QQ
The complete list is123456
The complete list isQQ
The complete list is2
The complete list isparams.sh
The complete list is123456
The complete list isQQ
查看硬盘的大小脚本
[root@localhost ~]# vi repboot.sh
#!/bin/bash
# To show usage of /boot directory and mode of kernel file.
echo "Useage of /boot: "
du -sh /boot
echo "The mode of kernel file:"
ls -lh /boot/vmlinuz-*
[root@localhost ~]# chmod a+x repboot.sh
逻辑整理：
#!/bin/bash
#To show usage of /boot directory and mode of kernel file.
A=`du -sh /boot | awk '{print $1}'`
echo "Usage of /boot: " "$A"
B=`ls -lh /boot/vmlinuz-* | awk -F"/" '{print $3}'`
echo "The mode of kernel file: " "$B"
unset A
unset B
每周五17:30清理FTP服务器的公共共享目录
• 检查 /var/ftp/pub/ 目录，将其中所有子目录及文件的详细列表、当时的时间信息追加保存到 /var/log/pubdir.log 日志文件中，然后清空该目
录
[root@localhost ~]# vi /opt/ftpclean.sh
#!/bin/bash
date >> /var/log/pubdir.log
ls -lhR /var/ftp/pub >> /var/log/pubdir.log
rm -rf /var/ftp/pub/*
[root@localhost ~]# crontab -e
30 17 * * 5 /opt/ftpclean.sh
每隔3天对数据库目录做一次完整备份
• 统计 /var/lib/mysql 目录占用的空间大小、查看当前的日期，并记录到临时文件 /tmp/dbinfo.txt 中
• 将 /tmp/dbinfo.txt 文件、/var/lib/mysql 目录进行压缩归档，备份到/opt/dbbak/目录中
• 备份后的包文件名中要包含当天的日期信息
• 最后删除临时文件/tmp/dbinfo.txt
[root@localhost ~]# vi /opt/dbbak.sh
#!/bin/bash
DAY=`date +%Y%m%d`
SIZE=`du -sh /var/lib/mysql`
echo "Date: $DAY" >> /tmp/dbinfo.txt
echo "Data Size: $Size" >> /tmp/dbinfo.txt
mkdir /opt/dbbak
cd /opt/dbbak
tar zcvf mysqlbak-${DAY}.tar.gz /var/lib/mysql /tmp/dbinfo.txt
rm -f /tmp/dbinfo.txt
[root@localhost ~]# crontab -e
55 23 */3 * * /opt/dbbak.sh
